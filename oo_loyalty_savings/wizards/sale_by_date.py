# -*- coding: utf-8 -*-
import base64
import logging
import os
import tempfile
from datetime import date, datetime

import openpyxl as xl
from odoo import _, api, fields, models
from openpyxl.styles import Alignment, Font
from openpyxl.utils import get_column_letter

BIG_FONT = Font(name='Arial', bold=True, size=15)
MID_FONT = Font(name='Arial', bold=True, size=12)
NORMAL_FONT = Font(name='Arial', size=10)
CENTER_ALIGN = Alignment(horizontal='left', vertical='center')

DATE_FORMAT = '%d/%m/%Y'
DATETIME_FORMAT = '%d/%m/%Y %H:%M:%S'

_logger = logging.getLogger(__name__)

COLS = ['Customer', 'Route', 'Sales', 'Paid', 'Balance', 'Cumulative Bal']


class SalebyDateReport(models.TransientModel):
    _name = 'sale.date.report'
    _description = 'Generate a sales report between dates'

    date_from = fields.Date(string='Date from', default=date.today(), required=True)
    date_to = fields.Date(string='Date to', default=date.today(), required=True)
    route_id = fields.Many2one(comodel_name='crm.team', string='Route')
    partner_ids = fields.Many2many(comodel_name='res.partner', string='Customers')

    def _prepare_data(self):
        data = {}
        domain = [('state', '=', 'posted'), ('invoice_date', '>=', self.date_from),
                  ('invoice_date', '<=', self.date_to)]
        if self.partner_ids:
            domain += [('partner_id', 'in', self.partner_ids.ids)]
        if self.route_id:
            domain += [('partner_id.team_id', '=', self.route_id.id)]

        invoices = self.env['account.move'].search(domain)

        for invoice in invoices:
            partner_id = invoice.partner_id
            sales = invoice.amount_total
            paid = sales - invoice.amount_residual
            balance = sales - paid
            if data.get(invoice.partner_id.id):
                data[invoice.partner_id.id]['Sales'] += sales
                data[invoice.partner_id.id]['Paid'] += paid
                data[invoice.partner_id.id]['Balance'] += balance
            else:
                data[invoice.partner_id.id] = {
                    'Customer': partner_id.name,
                    'Route': partner_id.team_id and partner_id.team_id.name or '',
                    'Sales': sales,
                    'Paid': paid,
                    'Balance': balance,
                    'Cumulative Bal': partner_id.total_due,
                }
        return data

    def action_generate(self):
        wb = xl.Workbook()
        ws = wb.active
        filename = 'Sales By Dates Report'
        customers = self.partner_ids and 'Select' or 'All'

        fr = 1  # current row
        ws[f'A{fr}'] = filename
        ws[f'A{fr}'].font = BIG_FONT
        ws[f'A{fr}'].alignment = CENTER_ALIGN
        ws.merge_cells(f'A{fr}:B{fr}')

        fr += 1
        ws[f'A{fr}'] = 'Print Out Date:'
        ws[f'B{fr}'] = datetime.now().strftime(DATETIME_FORMAT)
        fr += 1
        ws[f'A{fr}'] = 'Date:'
        ws[f'B{fr}'] = f'{self.date_from.strftime(DATE_FORMAT)} to {self.date_to.strftime(DATE_FORMAT)}'
        fr += 1
        ws[f'A{fr}'] = 'Customers:'
        ws[f'B{fr}'] = customers
        fr += 1
        ws[f'A{fr}'] = 'Currency:'
        ws[f'B{fr}'] = 'Balances in Home Currency'
        fr += 1
        ws[f'A{fr}'] = 'Route:'
        ws[f'B{fr}'] = self.route_id and self.route_id.name or 'All'
        fr += 2

        for row in range(2, 7):
            ws[f'A{row}'].font = MID_FONT
            ws[f'B{row}'].font = MID_FONT

        for index, col in enumerate(COLS, start=1):
            letter = get_column_letter(index)
            ws[f'{letter}{fr}'] = col
            ws[f'{letter}{fr}'].font = MID_FONT

        fr += 1
        # POPULATING THE COLUMN VALUES
        start_data_row = fr
        data = self._prepare_data()
        for group in data.values():
            for index, col in enumerate(COLS, start=1):
                letter = get_column_letter(index)
                ws[f'{letter}{fr}'] = group.get(col)
            fr += 1
        end_data_row = fr - 1

        # POPULATING THE TOTALS
        ws[f'A{fr}'] = 'Grand Total'
        ws[f'A{fr}'].font = MID_FONT

        for index, col in enumerate(COLS[2:], start=3):
            letter = get_column_letter(index)
            cell = f'{letter}{fr}'
            col_range = f'{letter}{start_data_row}:{letter}{end_data_row}'
            ws[cell] = f'=SUM({col_range})'
            ws[cell].font = MID_FONT

        xlsx_path = self.env['excel.wizard'].create_xls()
        wb.save(xlsx_path)
        mes = f'Sales analysis report generated by {self.env.user.name}.'
        datas = self.env['excel.wizard'].save_xls_file(xlsx_path, mes)

        attachment_id = self.env['excel.wizard'].create({
            'name': f'{filename}.xlsx',
            'report': datas
        })
        return {
            'name': 'Download Sales by Date Report',
            'context': self.env.context,
            'view_mode': 'form',
            'res_model': 'excel.wizard',
            'res_id': attachment_id.id,
            'type': 'ir.actions.act_window',
            'target': 'new'
        }


class ReportDownload(models.TransientModel):
    _name = 'excel.wizard'
    _description = 'Download Excel Forms'

    name = fields.Char('File Name', size=64)
    report = fields.Binary('Excel Report', readonly=True)

    @api.model
    def create_xls(self):
        _, xls_path = tempfile.mkstemp(
            suffix='.xlsx', prefix='xlsreport.tmp.')
        return xls_path

    @api.model
    def save_xls_file(self, xls_path, message=None):
        if not message:
            message = f'A report has been generated by {self.env.user.name}'
        with open(xls_path, 'rb') as f:
            datas = base64.encodebytes(f.read())
            _logger.info(message)
            self.delete_tempfile(xls_path)
        return datas

    @api.model
    def delete_tempfile(self, path):
        try:
            os.unlink(path)
        except (OSError, IOError):
            _logger.error('Error when trying to remove file %s' % path)
